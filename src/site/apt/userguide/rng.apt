~~
~~ Licensed to the Apache Software Foundation (ASF) under one or more
~~ contributor license agreements.  See the NOTICE file distributed with
~~ this work for additional information regarding copyright ownership.
~~ The ASF licenses this file to You under the Apache License, Version 2.0
~~ (the "License"); you may not use this file except in compliance with
~~ the License.  You may obtain a copy of the License at
~~
~~      http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~

  -----------------------------
  The Commons Rng User Guide
  -----------------------------

1. Usage overview

  <<<Commons Rng>>> provides generators of random sequences of numbers.
  Please refer to the {{{../apidocs/index.html}Javadoc}} for details on
  the API illustrated by the following examples.


  * The public API is defined in package <<<org.apache.commons.rng>>>.

+--------------------------+
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.RandomSource;
+--------------------------+


  * Random number generator objects are instantiated through factory
    methods defined in <<<RandomSource>>>, an <<<enum>>> that declares
    {{{../apidocs/org/apache/commons/rng/RandomSource.html#enum.constant.detail}all the available implementations}}.

+--------------------------+
UniformRandomProvider rng = RandomSource.create(RandomSource.MT);
+--------------------------+


  * A generator will return a randomly selected element from a range
    of possible values of some Java (primitive) type.

+--------------------------+
boolean isOn = rng.nextBoolean(); // "true" or "false".
+--------------------------+
+--------------------------+
int n = rng.nextInt(); // Integer.MIN_VALUE <= n <= Integer.MAX_VALUE.
int m = rng.nextInt(max); // 0 <= m < max.
+--------------------------+
+--------------------------+
long n =  rng.nextLong(); // Long.MIN_VALUE <= n <= Long.MAX_VALUE.
long m = rng.nextLong(max); // 0 <= m < max.
+--------------------------+
+--------------------------+
float x = rng.nextFloat(); // 0 <= x < 1.
+--------------------------+
+--------------------------+
double x = rng.nextDouble(); // 0 <= x < 1.
+--------------------------+


  * A generator will fill a given <<<byte>>> array with random values.

+--------------------------+
bytes[] a = new bytes[47];
// The elements of "a" are replaced with random values from the interval [-128, 127].
rng.nextBytes(a);
+--------------------------+
+--------------------------+
bytes[] a = new bytes[47];
// Only elements between index 15 (included) and 32 (excluded) are replaced with random values.
rng.nextBytes(a, 15, 32);
+--------------------------+


  * In order to generate reproducible sequences, generators must be instantiated with a user-defined seed.

+--------------------------+
UniformRandomProvider rng = RandomSource.create(RandomSource.SPLIT_MIX_64, 5776);
+--------------------------+

    If no seed is passed, a random seed is generated implicitly.

    Convenience methods are provided for explicitly generating random seeds of the various types.

+--------------------------+
int seed = RandomSource.createInt();
+--------------------------+
+--------------------------+
long seed = RandomSource.createLong();
+--------------------------+
+--------------------------+
int[] seed = RandomSource.createIntArray(128); // Length of returned array is 128.
+--------------------------+
+--------------------------+
long[] seed = RandomSource.createLongArray(128); // Length of returned array is 128.
+--------------------------+


  * Any of the following types can be passed to the <<<create>>> method as the "seed" argument:

    ** <<<int>>> or <<<Integer>>>

    ** <<<long>>> or <<<Long>>>

    ** <<<int[]>>>

    ** <<<long[]>>>

    []

+--------------------------+
UniformRandomProvider rng = RandomSource.create(RandomSource.ISAAC, 5776);
+--------------------------+
+--------------------------+
UniformRandomProvider rng = RandomSource.create(RandomSource.ISAAC, new int[] { 6, 7, 7, 5, 6, 1, 0, 2 });
+--------------------------+
+--------------------------+
UniformRandomProvider rng = RandomSource.create(RandomSource.ISAAC, new long[] { 0x638a3fd83bc0e851L, 0x9730fd12c75ae247L });
+--------------------------+

    Note however that, upon initialization, the underlying generation algorithm

    ** may not use all the information contents of the seed,

    ** may use a procedure (using the given seed as input) for further filling its internal state
       (in order to avoid a too uniform initial state).

    []

    In both cases, the behaviour is not standard but should not change between releases of the library
    (bugs notwithstanding).

    Each RNG implementation has a single "native" seed; when the seed argument passed
    to the <<<create>>> method is not of the native type, it is automatically converted.
    The conversion preserves the information contents but is otherwise not specified (i.e.
    different releases of the library may use different conversion procedures).

    Hence, if reproducibility of the generated sequences across successive releases of the
    library is necessary, users should ensure that they use native seeds.

+--------------------------+
long seed = 9246234616L;
if (!RandomSource.TWO_CMRES.isNativeSeed(seed)) {
    throw new IllegalArgumentException("Seed is not native");
}
+--------------------------+

    For each available implementation, the native seed type is specified in the
    {{{../apidocs/org/apache/commons/rng/RandomSource.html#enum.constant.detail}Javadoc}}.


  * Whenever a random source implementation is parameterized, the custom arguments
    are passed after the seed.

+--------------------------+
int seed = 96912062;
int first = 7; // Subcycle identifier.
int second = 4; // Subcycle identifier.
UniformRandomProvider rng = RandomSource.create(RandomSource.TWO_CMRES_SELECT, seed, first, second);
+--------------------------+

    In the above example, valid "subcycle identifiers" are in the range 0, ... ,
    {{{../apidocs/org/apache/commons/rng/RandomSource.html#numberOfCmresGenerators--}numberOfCmresGenerators() - 1}}.


  * The current state of a generator can be
    {{{../apidocs/org/apache/commons/rng/RandomSource.html#saveState-org.apache.commons.rng.UniformRandomProvider-}saved}}
    and
    {{{../apidocs/org/apache/commons/rng/RandomSource.html#restoreState-org.apache.commons.rng.UniformRandomProvider-org.apache.commons.rng.RandomSource.State-}restored}}
    later on.

+--------------------------+
UniformRandomProvider rng = RandomSource.create(RandomSource.WELL_512_A);
RandomSource.State state = RandomSource.saveState(rng);
double x = rng.nextDouble();
RandomSource.restoreState(rng, state);
double y = rng.nextDouble(); // x == y.
+--------------------------+


  * The <<<UniformRandomProvider>>> objects returned from the <<<create>>> methods are
    not serializable.

    However, users can easily set up a custom serialization scheme if the random source
    is known at both ends of the communication channel.
    This would be useful namely to save the state to persistent storage, and restore it
    such that the sequence will continue from where it left off.

+--------------------------+
RandomSource source = RandomSource.MT_64; // Known source identifier.

UniformRandomProvider rngOrig = RandomSource.create(source); // Original RNG instance.

// Save and serialize state.
RandomSource.State stateOrig = RandomSource.saveState(rngOrig);
ByteArrayOutputStream bos = new ByteArrayOutputStream();
ObjectOutputStream oos = new ObjectOutputStream(bos);
oos.writeObject(stateOrig.getState());

// Deserialize state.
ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
ObjectInputStream ois = new ObjectInputStream(bis);
RandomSource.State stateNew = new RandomSource.State((byte[]) ois.readObject());

UniformRandomProvider rngNew = RandomSource.create(source); // New RNG instance from the same "source".

// Restore original state on the new instance.
RandomSource.restoreState(rngNew, stateNew);
+--------------------------+


  []


2. Library layout

  The library's public API consists of classes and interfaces defined in package
  <<<org.apache.commons.rng>>>.

  * <<<UniformRandomProvider>>>: provides access to a sequence of random values
    uniformly distributed within some range.

  * <<<RandomSource>>>: determines which algorithm to use for generating the
    sequence of random values.

  * <<<RandomSource.State>>>: enables the save and restore functionality of
    the state of a <<<UniformRandomProvider>>> instance created through one
    of the <<<RandomSource>>> factory methods.

  []

  The <<<org.apache.commons.rng.internal>>> package and packages below it
  contain classes for supporting the above API.
  None of those classes should be used directly in applications.

  The rest of this section briefly describes the internal classes.
  More information is available in the {{{../apidocs/index.html}Javadoc}}.

  * <<<ProviderBuilder>>>: contains methods for instantiating the concrete
    RNG implementations based on the source identifier; it also takes care
    of calling the appropriate classes for seed type conversion.

  * <<<BaseProvider>>>: base class for all concrete RNG implementations;
    it contains higher-level algorithms <<<nextInt(int n)>>> and <<<nextLong(long n)>>>
    common to all implementations.

  * <<<StateSettable>>>: interface to be implemented by concrete random sources.

  * <<<org.apache.commons.rng.internal.util>>>

    ** <<<NumberFactory>>>: contains utilities for interpreting and combining
       the output (<<<int>>> or <<<long>>>) of the underlying source of
       randomness into the requested output, i.e. one of the Java primitive
       types supported by <<<UniformRandomProvider>>>.

    ** <<<SeedFactory>>>: contains factory methods for generating random seeds.

    ** <<<SeedConverter>>>: interface for classes that transform between
       supported seed types.

    ** Various classes that implement <<<SeedConverter>>> in order to transform
       from caller's seed to "native" seed.

    []

  * <<<org.apache.commons.rng.internal.source32>>>

    ** <<<RandomIntSource>>>: describes an algorithm that generates randomness in
       32-bits chunks (a.k.a Java <<<int>>>).

    ** <<<IntProvider>>>: base class for concrete classes that implement <<<RandomIntSource>>>.

    ** Concrete RNG algorithms that are subclasses of <<<IntProvider>>>.

    []

  * <<<org.apache.commons.rng.internal.source64>>>

    ** <<<RandomLongSource>>>: describes an algorithm that generates randomness in
       64-bits chunks (a.k.a Java <<<long>>>).

    ** <<<LongProvider>>>: base class for concrete classes that implement <<<RandomLongSource>>>.

    ** Concrete RNG algorithms that are subclasses of <<<LongProvider>>>.

    []

  []


3. Performance

  This section reports benchmarks of the RNG implementations.
  All runs were performed on a platform with the following characteristics:

  * CPU: Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz

  * Java runtime: 1.7.0_95-b00

  * JVM: OpenJDK 64-Bit Server VM 24.95-b01

  []

  The following tables indicates the performance for generating

  * a sequence of 32-bits integers (a.k.a. Java type <<<int>>>)

  * a sequence of 64-bits integers (a.k.a. Java type <<<long>>>)

  * a sequence of 64-bits floating point numbers (a.k.a. Java type <<<double>>>)

  []

  The first column is the RNG identifier (see {{{../apidocs/org/apache/commons/rng/RandomSource.html}RandomSource}}).
  
  Two independent benchmarking tools were used:

  * Commons Math <<<PerfTestUtils>>>

  * {{{http://openjdk.java.net/projects/code-tools/jmh/}JMH}}

  []
  
  The results of those tools are reported in second and third columns, respectively, where
  the value is the ratio of the performance of the implementation with respect to the 
  corresponding performance of the JDK's <<<java.util.Random>>> class.
  In these tables, <lower> is <better>.



  ** Generating <<<int>>> values


*---------------------------------*------------------------+--------------+
|| RNG identifier             || Ratio (PerfTestUtils) || Ratio (JMH) |
*---------------------------------*------------------------+--------------+
| JDK         | 1.21                   | 1.000        |
*---------------------------------*------------------------+--------------+
| MT   | 1.19                   | 0.639        |
*---------------------------------*------------------------+--------------+
| WELL_512_A          | 1.33                   | 0.740        |
*---------------------------------*------------------------+--------------+
| WELL_1024_A         | 1.38                   | 0.795        |
*---------------------------------*------------------------+--------------+
| WELL_19937_A        | 1.47                   | 1.039        |
*---------------------------------*------------------------+--------------+
| WELL_19937_C        | 1.54                   | 1.102        |
*---------------------------------*------------------------+--------------+
| WELL_44497_A        | 1.53                   | 1.187        |
*---------------------------------*------------------------+--------------+
| WELL_44497_B        | 1.59                   | 1.114        |
*---------------------------------*------------------------+--------------+
| ISAAC       | 1.30                   | 0.610        |
*---------------------------------*------------------------+--------------+
| MT_64 | 1.31                   | 0.734        |
*---------------------------------*------------------------+--------------+
| SPLIT_MIX_64        | 1.00                   | 0.361        |
*---------------------------------*------------------------+--------------+
| XOR_SHIFT_1024_S  | 1.09                   | 0.450        |
*---------------------------------*------------------------+--------------+
| TWO_CMRES          | 1.14                   | 0.464        |
*---------------------------------*------------------------+--------------+
| MWC_256          | ????                   | ????        |
*---------------------------------*------------------------+--------------+
| KISS          | ????                   | ????        |
*---------------------------------*------------------------+--------------+



  ** Generating <<<long>>> values


*---------------------------------*------------------------+--------------+
|| RNG identifier             || Ratio (PerfTestUtils) || Ratio (JMH) |
*---------------------------------*------------------------+--------------+
| JDK         | 1.40                   | 1.002        |
*---------------------------------*------------------------+--------------+
| MT   | 0.85                   | 0.569        |
*---------------------------------*------------------------+--------------+
| WELL_512_A          | 1.05                   | 0.798        |
*---------------------------------*------------------------+--------------+
| WELL_1024_A         | 1.08                   | 0.873        |
*---------------------------------*------------------------+--------------+
| WELL_19937_A        | 1.21                   | 0.968        |
*---------------------------------*------------------------+--------------+
| WELL_19937_C        | 1.27                   | 1.020        |
*---------------------------------*------------------------+--------------+
| WELL_44497_A        | 1.26                   | 1.103        |
*---------------------------------*------------------------+--------------+
| WELL_44497_B        | 1.31                   | 1.043        |
*---------------------------------*------------------------+--------------+
| ISAAC       | 0.96                   | 0.515        |
*---------------------------------*------------------------+--------------+
| MT_64 | 0.67                   | 0.343        |
*---------------------------------*------------------------+--------------+
| SPLIT_MIX_64        | 0.55                   | 0.175        |
*---------------------------------*------------------------+--------------+
| XOR_SHIFT_1024_S  | 0.59                   | 0.207        |
*---------------------------------*------------------------+--------------+
| TWO_CMRES          | 0.61                   | 0.223        |
*---------------------------------*------------------------+--------------+
| MWC_256          | ????                   | ????        |
*---------------------------------*------------------------+--------------+
| KISS          | ????                   | ????        |
*---------------------------------*------------------------+--------------+



  ** Generating <<<double>>> values


*---------------------------------*------------------------+--------------+
|| RNG identifier             || Ratio (PerfTestUtils) || Ratio (JMH) |
*---------------------------------*------------------------+--------------+
| JDK         | 1.15                   | 1.001        |
*---------------------------------*------------------------+--------------+
| MT   | 0.86                   | 0.614        |
*---------------------------------*------------------------+--------------+
| WELL_512_A          | 1.08                   | 0.839        |
*---------------------------------*------------------------+--------------+
| WELL_1024_A         | 1.11                   | 0.899        |
*---------------------------------*------------------------+--------------+
| WELL_19937_A        | 1.23                   | 0.984        |
*---------------------------------*------------------------+--------------+
| WELL_19937_C        | 1.29                   | 1.069        |
*---------------------------------*------------------------+--------------+
| WELL_44497_A        | 1.28                   | 1.125        |
*---------------------------------*------------------------+--------------+
| WELL_44497_B        | 1.33                   | 1.093        |
*---------------------------------*------------------------+--------------+
| ISAAC       | 0.98                   | 0.583        |
*---------------------------------*------------------------+--------------+
| MT_64 | 0.66                   | 0.391        |
*---------------------------------*------------------------+--------------+
| SPLIT_MIX_64        | 0.57                   | 0.226        |
*---------------------------------*------------------------+--------------+
| XOR_SHIFT_1024_S  | 0.59                   | 0.262        |
*---------------------------------*------------------------+--------------+
| TWO_CMRES          | 0.60                   | 0.284        |
*---------------------------------*------------------------+--------------+
| MWC_256          | ????                   | ????        |
*---------------------------------*------------------------+--------------+
| KISS          | ????                   | ????        |
*---------------------------------*------------------------+--------------+


4. Quality

  This section reports results of performing "stress tests" that aim at detecting failures
  of an implementation to produce sequences of numbers that follow a uniform distribution.

  Two different test suites were used:

  * {{{http://www.phy.duke.edu/~rgb/General/dieharder.php}Dieharder}}

  * {{{http://simul.iro.umontreal.ca/testu01/tu01.html}TestU01}}

  []

  The first column is the RNG identifier (see {{{../apidocs/org/apache/commons/rng/RandomSource.html}RandomSource}}).
  The second and third columns contain the number of tests which <Dieharder> and <TestU01>
  respectively reported as below the accepted threshold for considering the sequence as
  uniformly random; hence, in this table, <lower> is <better>.

  For each the two test suites, three runs were performed (using random seeds): Click on one
  of the numbers of the comma-separated list in order to see the text report of the
  corresponding run.
  Note: For <Dieharder>, a failure on the "Diehard Sums Test" can be {{{http://www.phy.duke.edu/~rgb/General/dieharder.php}ignored}}.


*---------------------------------*----------------*---------------------*
|| RNG identifier             || Dieharder     || TestU01 (BigCrush) |
*----------------*----------------*----------------*---------------------*
| JDK         | {{{../txt/userguide/stress/dh/run_1/dh_1}15}}, {{{../txt/userguide/stress/dh/run_2/dh_1}15}}, {{{../txt/userguide/stress/dh/run_3/dh_1}14}} | {{{../txt/userguide/stress/tu/run_1/tu_1}74}}, {{{../txt/userguide/stress/tu/run_2/tu_1}75}}, {{{../txt/userguide/stress/tu/run_3/tu_1}74}} |
*---------------------------------*----------------*----------------*
| MT   | {{{../txt/userguide/stress/dh/run_1/dh_2}0}}, {{{../txt/userguide/stress/dh/run_2/dh_2}0}}, {{{../txt/userguide/stress/dh/run_3/dh_2}0}} | {{{../txt/userguide/stress/tu/run_1/tu_2}2}}, {{{../txt/userguide/stress/tu/run_2/tu_2}2}}, {{{../txt/userguide/stress/tu/run_3/tu_2}2}} |
*---------------------------------*----------------*----------------*
| WELL_512_A          | {{{../txt/userguide/stress/dh/run_1/dh_3}0}}, {{{../txt/userguide/stress/dh/run_2/dh_3}1}}, {{{../txt/userguide/stress/dh/run_3/dh_3}0}} | {{{../txt/userguide/stress/tu/run_1/tu_3}6}}, {{{../txt/userguide/stress/tu/run_2/tu_3}6}}, {{{../txt/userguide/stress/tu/run_3/tu_3}7}} |
*---------------------------------*----------------*----------------*
| WELL_1024_A         | {{{../txt/userguide/stress/dh/run_1/dh_4}0}}, {{{../txt/userguide/stress/dh/run_2/dh_4}1}} , {{{../txt/userguide/stress/dh/run_3/dh_4}0}}| {{{../txt/userguide/stress/tu/run_1/tu_4}4}}, {{{../txt/userguide/stress/tu/run_2/tu_4}6}}, {{{../txt/userguide/stress/tu/run_3/tu_4}4}} |
*---------------------------------*----------------*----------------*
| WELL_19937_A        | {{{../txt/userguide/stress/dh/run_1/dh_5}0}}, {{{../txt/userguide/stress/dh/run_2/dh_5}0}}, {{{../txt/userguide/stress/dh/run_3/dh_5}0}} | {{{../txt/userguide/stress/tu/run_1/tu_5}2}}, {{{../txt/userguide/stress/tu/run_2/tu_5}2}}, {{{../txt/userguide/stress/tu/run_3/tu_5}2}} |
*---------------------------------*----------------*----------------*
| WELL_19937_C        | {{{../txt/userguide/stress/dh/run_1/dh_6}0}}, {{{../txt/userguide/stress/dh/run_2/dh_6}0}}, {{{../txt/userguide/stress/dh/run_3/dh_6}0}} | {{{../txt/userguide/stress/tu/run_1/tu_6}2}}, {{{../txt/userguide/stress/tu/run_2/tu_6}3}}, {{{../txt/userguide/stress/tu/run_3/tu_6}3}} |
*---------------------------------*----------------*----------------*
| WELL_44497_A        | {{{../txt/userguide/stress/dh/run_1/dh_7}0}}, {{{../txt/userguide/stress/dh/run_2/dh_7}0}}, {{{../txt/userguide/stress/dh/run_3/dh_7}0}} | {{{../txt/userguide/stress/tu/run_1/tu_7}3}}, {{{../txt/userguide/stress/tu/run_2/tu_7}3}}, {{{../txt/userguide/stress/tu/run_3/tu_7}2}} |
*---------------------------------*----------------*----------------*
| WELL_44497_B        | {{{../txt/userguide/stress/dh/run_1/dh_8}0}}, {{{../txt/userguide/stress/dh/run_2/dh_8}0}}, {{{../txt/userguide/stress/dh/run_3/dh_8}0}} | {{{../txt/userguide/stress/tu/run_1/tu_8}2}}, {{{../txt/userguide/stress/tu/run_2/tu_8}2}}, {{{../txt/userguide/stress/tu/run_3/tu_8}2}} |
*---------------------------------*----------------*----------------*
| ISAAC       | {{{../txt/userguide/stress/dh/run_1/dh_9}0}}, {{{../txt/userguide/stress/dh/run_2/dh_9}0}}, {{{../txt/userguide/stress/dh/run_3/dh_9}0}} | {{{../txt/userguide/stress/tu/run_1/tu_9}0}}, {{{../txt/userguide/stress/tu/run_2/tu_9}0}}, {{{../txt/userguide/stress/tu/run_3/tu_9}1}} |
*---------------------------------*----------------*----------------*
| MT_64 | {{{../txt/userguide/stress/dh/run_1/dh_10}1}}, {{{../txt/userguide/stress/dh/run_2/dh_10}0}}, {{{../txt/userguide/stress/dh/run_3/dh_10}0}} | {{{../txt/userguide/stress/tu/run_1/tu_10}2}}, {{{../txt/userguide/stress/tu/run_2/tu_10}2}}, {{{../txt/userguide/stress/tu/run_3/tu_10}2}} |
*---------------------------------*----------------*----------------*
| SPLIT_MIX_64        | {{{../txt/userguide/stress/dh/run_1/dh_11}0}}, {{{../txt/userguide/stress/dh/run_2/dh_11}0}}, {{{../txt/userguide/stress/dh/run_3/dh_11}0}} | {{{../txt/userguide/stress/tu/run_1/tu_11}2}}, {{{../txt/userguide/stress/tu/run_2/tu_11}0}}, {{{../txt/userguide/stress/tu/run_3/tu_11}1}} |
*---------------------------------*----------------*----------------*
| XOR_SHIFT_1024_S  | {{{../txt/userguide/stress/dh/run_1/dh_12}0}}, {{{../txt/userguide/stress/dh/run_2/dh_12}0}}, {{{../txt/userguide/stress/dh/run_3/dh_12}0}} | {{{../txt/userguide/stress/tu/run_1/tu_12}0}}, {{{../txt/userguide/stress/tu/run_2/tu_12}0}}, {{{../txt/userguide/stress/tu/run_3/tu_12}0}} |
*---------------------------------*----------------*----------------*
| TWO_CMRES          | {{{../txt/userguide/stress/dh/run_1/dh_13}0}}, {{{../txt/userguide/stress/dh/run_2/dh_13}0}}, {{{../txt/userguide/stress/dh/run_3/dh_13}0}} | {{{../txt/userguide/stress/tu/run_1/tu_13}0}}, {{{../txt/userguide/stress/tu/run_2/tu_13}0}}, {{{../txt/userguide/stress/tu/run_3/tu_13}1}} |
*---------------------------------*----------------*----------------*
| MWC_256          | {{{../txt/userguide/stress/dh/run_1/dh_14}0}}, {{{../txt/userguide/stress/dh/run_2/dh_14}0}}, {{{../txt/userguide/stress/dh/run_3/dh_14}0}} | {{{../txt/userguide/stress/tu/run_1/tu_14}0}}, {{{../txt/userguide/stress/tu/run_2/tu_14}0}}, {{{../txt/userguide/stress/tu/run_3/tu_14}1}} |
*---------------------------------*----------------*----------------*
| KISS          | {{{../txt/userguide/stress/dh/run_1/dh_15}0}}, {{{../txt/userguide/stress/dh/run_2/dh_15}0}}, {{{../txt/userguide/stress/dh/run_3/dh_15}0}} | {{{../txt/userguide/stress/tu/run_1/tu_15}0}}, {{{../txt/userguide/stress/tu/run_2/tu_15}1}}, {{{../txt/userguide/stress/tu/run_3/tu_15}0}} |
*---------------------------------*----------------*----------------*


5. Dependencies

  Commons Rng requires JDK 1.6+ and has no runtime dependencies.

6. License

  Commons Rng is distributed under the terms of the
  {{{http://www.apache.org/licenses/LICENSE-2.0}Apache License, Version 2.0}}.

  This product includes software developed by other third parties and
  distributed under licenses terms compatible with Apache License, Version 2.0.
  All the licenses of such third parties products are available in the distribution
  in the LICENSE.txt file. Some products require additional attribution, these
  attributions can be found in the NOTICE.txt file. These files are available
  both in the source packages and in the binaries distribution jar files.
