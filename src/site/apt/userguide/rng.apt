~~
~~ Licensed to the Apache Software Foundation (ASF) under one or more
~~ contributor license agreements.  See the NOTICE file distributed with
~~ this work for additional information regarding copyright ownership.
~~ The ASF licenses this file to You under the Apache License, Version 2.0
~~ (the "License"); you may not use this file except in compliance with
~~ the License.  You may obtain a copy of the License at
~~
~~      http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~

  -----------------------------
  The Commons Rng User Guide
  -----------------------------

1. Usage overview

  The <<<rng>>> package contains the random number generation functionality.
  Please refer to the {{{../apidocs/index.html}Javadoc}} for details.


2. Library layout


3. Performance

  This section reports benchmarks of the RNG implementations.
  All runs were performed on a platform with the following characteristics:

  * CPU: Intel(R) Core(TM) i7-3770 CPU @ 3.40GHz

  * Java runtime: 1.7.0_95-b00

  * JVM: OpenJDK 64-Bit Server VM 24.95-b01

  []

  The following tables indicates the performance for generating

  * a sequence of 32-bits integers (a.k.a. Java type <<<int>>>)

  * a sequence of 64-bits integers (a.k.a. Java type <<<long>>>)

  * a sequence of 64-bits floating point numbers (a.k.a. Java type <<<double>>>)

  []

  The first column is the RNG identifier (see {{{../apidocs/org/apache/commons/rng/RandomSource.html}RandomSource}}).
  
  Two independent benchmarking tools were used:

  * Commons Math <<<PerfTestUtils>>>

  * {{{http://openjdk.java.net/projects/code-tools/jmh/}JMH}}

  []
  
  The results of those tools are reported in second and third columns, respectively, where
  the value is the ratio of the performance of the implementation with respect to the 
  corresponding performance of the JDK's <<<java.util.Random>>> class.
  In these tables, <lower> is <better>.



  ** Generating <<<int>>> values


*---------------------------------*------------------------+--------------+
|| RNG identifier             || Ratio (PerfTestUtils) || Ratio (JMH) |
*---------------------------------*------------------------+--------------+
| JDK         | 1.21                   | 1.000        |
*---------------------------------*------------------------+--------------+
| MT   | 1.19                   | 0.639        |
*---------------------------------*------------------------+--------------+
| WELL_512_A          | 1.33                   | 0.740        |
*---------------------------------*------------------------+--------------+
| WELL_1024_A         | 1.38                   | 0.795        |
*---------------------------------*------------------------+--------------+
| WELL_19937_A        | 1.47                   | 1.039        |
*---------------------------------*------------------------+--------------+
| WELL_19937_C        | 1.54                   | 1.102        |
*---------------------------------*------------------------+--------------+
| WELL_44497_A        | 1.53                   | 1.187        |
*---------------------------------*------------------------+--------------+
| WELL_44497_B        | 1.59                   | 1.114        |
*---------------------------------*------------------------+--------------+
| ISAAC       | 1.30                   | 0.610        |
*---------------------------------*------------------------+--------------+
| MT_64 | 1.31                   | 0.734        |
*---------------------------------*------------------------+--------------+
| SPLIT_MIX_64        | 1.00                   | 0.361        |
*---------------------------------*------------------------+--------------+
| XOR_SHIFT_1024_S  | 1.09                   | 0.450        |
*---------------------------------*------------------------+--------------+
| TWO_CMRES          | 1.14                   | 0.464        |
*---------------------------------*------------------------+--------------+



  ** Generating <<<long>>> values


*---------------------------------*------------------------+--------------+
|| RNG identifier             || Ratio (PerfTestUtils) || Ratio (JMH) |
*---------------------------------*------------------------+--------------+
| JDK         | 1.40                   | 1.002        |
*---------------------------------*------------------------+--------------+
| MT   | 0.85                   | 0.569        |
*---------------------------------*------------------------+--------------+
| WELL_512_A          | 1.05                   | 0.798        |
*---------------------------------*------------------------+--------------+
| WELL_1024_A         | 1.08                   | 0.873        |
*---------------------------------*------------------------+--------------+
| WELL_19937_A        | 1.21                   | 0.968        |
*---------------------------------*------------------------+--------------+
| WELL_19937_C        | 1.27                   | 1.020        |
*---------------------------------*------------------------+--------------+
| WELL_44497_A        | 1.26                   | 1.103        |
*---------------------------------*------------------------+--------------+
| WELL_44497_B        | 1.31                   | 1.043        |
*---------------------------------*------------------------+--------------+
| ISAAC       | 0.96                   | 0.515        |
*---------------------------------*------------------------+--------------+
| MT_64 | 0.67                   | 0.343        |
*---------------------------------*------------------------+--------------+
| SPLIT_MIX_64        | 0.55                   | 0.175        |
*---------------------------------*------------------------+--------------+
| XOR_SHIFT_1024_S  | 0.59                   | 0.207        |
*---------------------------------*------------------------+--------------+
| TWO_CMRES          | 0.61                   | 0.223        |
*---------------------------------*------------------------+--------------+



  ** Generating <<<double>>> values


*---------------------------------*------------------------+--------------+
|| RNG identifier             || Ratio (PerfTestUtils) || Ratio (JMH) |
*---------------------------------*------------------------+--------------+
| JDK         | 1.15                   | 1.001        |
*---------------------------------*------------------------+--------------+
| MT   | 0.86                   | 0.614        |
*---------------------------------*------------------------+--------------+
| WELL_512_A          | 1.08                   | 0.839        |
*---------------------------------*------------------------+--------------+
| WELL_1024_A         | 1.11                   | 0.899        |
*---------------------------------*------------------------+--------------+
| WELL_19937_A        | 1.23                   | 0.984        |
*---------------------------------*------------------------+--------------+
| WELL_19937_C        | 1.29                   | 1.069        |
*---------------------------------*------------------------+--------------+
| WELL_44497_A        | 1.28                   | 1.125        |
*---------------------------------*------------------------+--------------+
| WELL_44497_B        | 1.33                   | 1.093        |
*---------------------------------*------------------------+--------------+
| ISAAC       | 0.98                   | 0.583        |
*---------------------------------*------------------------+--------------+
| MT_64 | 0.66                   | 0.391        |
*---------------------------------*------------------------+--------------+
| SPLIT_MIX_64        | 0.57                   | 0.226        |
*---------------------------------*------------------------+--------------+
| XOR_SHIFT_1024_S  | 0.59                   | 0.262        |
*---------------------------------*------------------------+--------------+
| TWO_CMRES          | 0.60                   | 0.284        |
*---------------------------------*------------------------+--------------+


4. Quality

  This section reports results of performing "stress tests" that aim at detecting failures
  of an implementation to produce sequences of numbers that follow a uniform distribution.

  Two different test suites were used:

  * {{{http://www.phy.duke.edu/~rgb/General/dieharder.php}Dieharder}}

  * {{{http://simul.iro.umontreal.ca/testu01/tu01.html}TestU01}}

  []

  The first column is the RNG identifier (see {{{../apidocs/org/apache/commons/rng/RandomSource.html}RandomSource}}).
  The second and third columns contain the number of tests which <Dieharder> and <TestU01>
  respectively reported as below the accepted threshold for considering the sequence as
  uniformly random; hence, in this table, <lower> is <better>.

  For each the two test suites, two runs were performed (using random seeds): Click on one
  of the numbers of the comma-separated list in order to see the text report of the
  corresponding run.
  Note: For <Dieharder>, a failure on the "Diehard Sums Test" can be {{{http://www.phy.duke.edu/~rgb/General/dieharder.php}ignored}}.


*---------------------------------*----------------*---------------------*
|| RNG identifier             || Dieharder     || TestU01 (BigCrush) |
*----------------*----------------*----------------*---------------------*
| JDK         | {{{../txt/userguide/rng/stress/dh/run_1/dh_1}13}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_1}11}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_1}77}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_1}74}} |
*---------------------------------*----------------*----------------*
| MT   | {{{../txt/userguide/rng/stress/dh/run_1/dh_2}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_2}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_2}2}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_2}2}} |
*---------------------------------*----------------*----------------*
| WELL_512_A          | {{{../txt/userguide/rng/stress/dh/run_1/dh_3}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_3}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_3}6}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_3}7}} |
*---------------------------------*----------------*----------------*
| WELL_1024_A         | {{{../txt/userguide/rng/stress/dh/run_1/dh_4}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_4}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_4}5}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_4}4}} |
*---------------------------------*----------------*----------------*
| WELL_19937_A        | {{{../txt/userguide/rng/stress/dh/run_1/dh_5}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_5}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_5}3}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_5}3}} |
*---------------------------------*----------------*----------------*
| WELL_19937_C        | {{{../txt/userguide/rng/stress/dh/run_1/dh_6}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_6}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_6}3}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_6}2}} |
*---------------------------------*----------------*----------------*
| WELL_44497_A        | {{{../txt/userguide/rng/stress/dh/run_1/dh_7}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_7}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_7}2}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_7}2}} |
*---------------------------------*----------------*----------------*
| WELL_44497_B        | {{{../txt/userguide/rng/stress/dh/run_1/dh_8}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_8}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_8}3}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_8}2}} |
*---------------------------------*----------------*----------------*
| ISAAC       | {{{../txt/userguide/rng/stress/dh/run_1/dh_9}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_9}1}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_9}1}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_9}0}} |
*---------------------------------*----------------*----------------*
| MT_64 | {{{../txt/userguide/rng/stress/dh/run_1/dh_10}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_10}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_10}2}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_10}2}} |
*---------------------------------*----------------*----------------*
| SPLIT_MIX_64        | {{{../txt/userguide/rng/stress/dh/run_1/dh_11}1}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_11}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_11}0}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_11}0}} |
*---------------------------------*----------------*----------------*
| XOR_SHIFT_1024_S  | {{{../txt/userguide/rng/stress/dh/run_1/dh_12}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_12}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_12}2}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_12}0}} |
*---------------------------------*----------------*----------------*
| TWO_CMRES          | {{{../txt/userguide/rng/stress/dh/run_1/dh_13}0}}, {{{../txt/userguide/rng/stress/dh/run_2/dh_13}0}} | {{{../txt/userguide/rng/stress/tu/run_1/tu_13}1}}, {{{../txt/userguide/rng/stress/tu/run_2/tu_13}0}} |
*---------------------------------*----------------*----------------*


5. Dependencies

  Commons Rng requires JDK 1.5+ and has no runtime dependencies.

6. License

  Commons Rng is distributed under the terms of the
  {{{http://www.apache.org/licenses/LICENSE-2.0}Apache License, Version 2.0}}.

  This product includes software developed by other third parties and
  distributed under licenses terms compatible with Apache License, Version 2.0.
  All the licenses of such third parties products are available in the distribution
  in the LICENSE.txt file. Some products require additional attribution, these
  attributions can be found in the NOTICE.txt file. These files are available
  both in the source packages and in the binaries distribution jar files.
